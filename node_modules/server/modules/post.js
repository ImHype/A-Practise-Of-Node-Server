var qs =require("querystring");
module.exports = function post(req,res,next){
    var body_data,
    chunk_list=[],
    contentType = req.headers["content-type"],
    contentLength = parseInt(req.headers["content-length"]),
    isMulti = /(boundary=)/gi.test(contentType),
    boundary = RegExp["$'"],
    boundaryStandard = "--"+boundary+"\r\n",
    boundaryEnd ="--"+ boundary+"--\r\n";

    req.files ={} ;
    req.body = {} ;

    req.on("data",function(chunk){
        chunk_list.push(chunk);
    });
    req.on("end",function(){
        body_data = Buffer.concat(chunk_list);
        if(isMulti){
            var backup = [];
            var readyState = 0;
            // 0表示换衣边界字符串
            // 1表示正在读取头部信息字符串
            // 2表示正在读取body体数据
            var body = [];
            // body_data = body_data.substring(boundaryStandard.length,body_data.length - boundaryEnd.length);
            var position = 0;
            function handle(b){
                switch(readyState)
                {
                    case 0:
                        if(body_data.slice(position,position+boundaryStandard.length).toString() === boundaryStandard){
                            if(backup.length>0) 
                            {
                                body.push(backup);
                                backup =[];
                            }else{
                                position+=boundaryStandard.length
                                readyState =1;
                            }
                        }else if(body_data.slice(position,position+boundaryEnd.length).toString() === boundaryEnd){
                            if(backup.length>0)
                            {
                                body.push(backup);
                            }
                            return true;
                        }else{
                            backup.push(b);
                            position+=1;
                        }
                    break;
                    case 1:
                        if(backup.length>=3){
                            var arr3 = backup.slice(backup.length-3,backup.length);
                            arr3.push(b);
                            backup.push(b);
                            if(new Buffer(arr3).toString() === "\r\n\r\n"){
                                body.push(backup);
                                backup =[];
                                readyState =2;
                            }
                        }else{
                            backup.push(b);
                        }
                        position+=1;
                    break;

                    case 2:
                        backup.push(b);
                        position+=1;
                    break;
                }
            }
            for (var len = body_data.length; position < len; ) {
                var b =body_data[position];
                if(readyState === 0||readyState===2){
                    if(b===45){
                        readyState = 0;
                    }else{
                        readyState = 2;
                    }
                }
                var end =handle(b);
                if(end){
                    for (var i = 0,len = body.length; i < len; ) {
                        var header = new Buffer(body[i]).toString();
                        var arr = body[i+1];
                        var data = new Buffer(arr.slice(0,arr.length-2));
                        /name=\"(.*?)\"/g.test(header);
                        var fieldName = RegExp.$1;
                        var isFile = /filename/g.test(header);
                        header.match(/filename=\"([^\"\"]*?)\"/g);
                        
                        if(isFile){

                            if(req.files[fieldName]){
                                var tStr = Object.prototype.toString.call(req.files[fieldName]);
                                if(tStr!=="[object Array]"){
                                    req.files[fieldName] =[req.files[fieldName]] ;
                                }
                                req.files[fieldName].push({
                                    filename:RegExp.$1,
                                    content:data
                                });
                            }else{
                                req.files[fieldName] = {
                                    filename:RegExp.$1,
                                    content:data
                                };
                            }
                        }else{
                            req.body[fieldName] = data.toString();
                        }
                        i+=2;
                    }
                    break;
                }
            };
        }else{
            try{
                req.body = qs.parse(body_data.toString("utf-8"));
            }catch(e){}
        }
        
        next();
    });
 
};