var sessions = {};
var key = "sessionId";
var EXPIRES = 20*60*1000;

// cookie
var parseCookie = function(cookie){
	var cookies = {};
	if(!cookie){
		return cookies
	}else{
		var list = cookie.split(";");
		for (var i = 0; i < list.length; i++) {
			var pair = list[i].split("=");
			cookies[pair[0].trim()]=pair[1];
		};
	}
	return cookies;
}

// 全局的初始化
var generate = function(){
	var session = {};
	session.id=(new Date()).getTime()+Math.random();
	session.cookie = {
		expire:(new Date().getTime())+EXPIRES
	};
	sessions[session.id] = session;
	return session;
}
var serialize = function(name,val,opt){
	var pairs = [name+'='+(val)];
	opt = opt||{};
	if(opt.maxAge) pairs.push('Max-Age='+opt.maxAge);
	if(opt.domain) pairs.push('Domain='+opt.domin);
	if(opt.path) pairs.push('Path='+opt.path);
	if(opt.expires) pairs.push('Expires='+opt.expires);
	if(opt.httpOnly) pairs.push('HttpOnly');
	if(opt.secure) pairs.push(' ');
	return pairs.join(';');
}
var cookMid = function (req,res){
	req.cookies = parseCookie(req.headers.cookie);
}
var sessionMid = function(req,res){
	var sessionId = req.cookies[key];
	if(!sessionId){
		req.session = generate();
	}else{
		var session = sessions[sessionId];
		if(!session)
		{
			req.session = generate();		
			return;
		}
		if(session.cookie.expire > (new Date()).getTime()){
			session.cookie.expire = (new Date()).getTime()+EXPIRES;
			req.session = session;
		}else{
			// 过期了
			delete session[id];
			req.session = generate();
		}
	}
}
var http = require('http');
function Wheader(req,res){
	var writeHead = res.writeHead;
	res.writeHead = function(){
		var cookies =res.getHeader("Set-Cookie");
		var session = serialize(key, req.session.id);
		cookies = Array.isArray(cookies)?cookies.concat(session):[cookies,session];
		res.setHeader('Set-Cookie',cookies);
		return writeHead.apply(this,arguments);
	}
}
module.exports=function(req,res,next){
	cookMid(req,res);
	sessionMid(req,res);
	Wheader(req,res);
	next(req,res);
}